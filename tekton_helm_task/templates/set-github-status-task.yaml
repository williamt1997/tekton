apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: github-set-status
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/version: "0.4"
  annotations:
    tekton.dev/categories: Git
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: github
    tekton.dev/displayName: "set github status"
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  results:
    - name: git-status

  params:
  - name: GITHUB_HOST_URL
    default: "api.github.com"
    type: string

  - name: API_PATH_PREFIX
    default: ""
    type: string

  - name: REPO_FULL_NAME
    type: string

  - name: GITHUB_TOKEN_SECRET_NAME
    type: string
    default: github

  - name: GITHUB_TOKEN_SECRET_KEY
    type: string
    default: token

  - name: SHA
    type: string

  - name: TARGET_URL
    type: string

  - name: DESCRIPTION
    type: string

  - name: CONTEXT
    default: "continuous-integration/tekton"
    type: string

  - name: STATE
    type: string

  - name: AUTH_TYPE
    type: string
    default: Bearer

  - name: IMAGE
    type: string
    default: python:3.10.1-alpine3.15

  - name: SHEBANG
    type: string
    default: /usr/bin/env python

  volumes:
    - name: githubtoken
      secret:
        secretName: $(params.GITHUB_TOKEN_SECRET_NAME)

  steps:
    - name: configure-status
      image: ubuntu
      script: |
        #!/bin/bash
        if [ "$(params.STATE)" == "Succeeded" ]; then
          echo "success" > "$(results.git-status.path)"
        elif [ "$(params.STATE)" == "pending" ]; then
          echo "pending" > "$(results.git-status.path)"
        else
          echo "failure" > "$(results.git-status.path)"
        fi
      resources:
        requests:
          cpu:  {{ .Values.requests.lowResources.cpu }}
          memory: {{ .Values.requests.lowResources.memory }}
        limits:
          cpu: {{ .Values.limits.lowResources.cpu}}
          memory: {{ .Values.limits.lowResources.memory }}
      securityContext:
        runAsUser: 0
    - name: set-status
      resources:
        requests:
          cpu:  {{ .Values.requests.mediumResources.cpu }}
          memory: {{ .Values.requests.mediumResources.memory }}
        limits:
          cpu: {{ .Values.limits.mediumResources.cpu }}
          memory: {{ .Values.limits.mediumResources.memory }}
      volumeMounts:
        - name: githubtoken
          mountPath: /etc/github-set-status
      env:
        - name: GITHUB_HOST_URL
          value: $(params.GITHUB_HOST_URL)
        - name: API_PATH_PREFIX
          value: $(params.API_PATH_PREFIX)
        - name: REPO_FULL_NAME
          value: $(params.REPO_FULL_NAME)
        - name: GITHUB_TOKEN_SECRET_NAME
          value: $(params.GITHUB_TOKEN_SECRET_NAME)
        - name: GITHUB_TOKEN_SECRET_KEY
          value: $(params.GITHUB_TOKEN_SECRET_KEY)
        - name: SHA
          value: $(params.SHA)
        - name: TARGET_URL
          value: $(params.TARGET_URL)
        - name: DESCRIPTION
          value: $(params.DESCRIPTION)
        - name: CONTEXT
          value: $(params.CONTEXT)
        - name: AUTH_TYPE
          value: $(params.AUTH_TYPE)
        - name: SHEBANG
          value: $(params.SHEBANG)

      image: $(params.IMAGE)
      script: |
        #!$(params.SHEBANG)

        """This script will set the CI status on GitHub PR"""

        import json
        import os
        import sys
        import http.client

        github_token_filename = "/etc/github-set-status/" + \
            os.getenv("GITHUB_TOKEN_SECRET_KEY")
        github_token = open(github_token_filename, "r").read()

        git_status_path = "/tekton/results/git-status"
        with open(git_status_path, "r") as f:
          git_status = f.read().strip()

        status_url = os.getenv("API_PATH_PREFIX") + "/repos/" + \
            os.getenv("REPO_FULL_NAME") + "/statuses/" + os.getenv("SHA")

        data = {
            "state": git_status,
            "target_url": os.getenv("TARGET_URL"),
            "description": os.getenv("DESCRIPTION"),
            "context": os.getenv("CONTEXT")
        }
        print("Sending this data to GitHub@{url}: ".format(
          url=os.getenv("GITHUB_HOST_URL")))
        print("Full request URL: {url}".format(url=status_url))
        print(data)

        authHeader = os.getenv("AUTH_TYPE") + " " + github_token

        # This is for our fake github server
        if "$(params.GITHUB_HOST_URL)".startswith("http://"):
          conn = http.client.HTTPConnection("$(params.GITHUB_HOST_URL)".replace("http://", ""))
        else:
          conn = http.client.HTTPSConnection("$(params.GITHUB_HOST_URL)")

        conn.request(
            "POST",
            status_url,
            body=json.dumps(data),
            headers={
                "User-Agent": "TektonCD, the peaceful cat",
                "Authorization": authHeader,
                "Accept": "application/vnd.github.v3+json ",
            })
        resp = conn.getresponse()
        if not str(resp.status).startswith("2"):
            print("Error: %d" % (resp.status))
            print("Failed request URL: {url}".format(url=status_url))
            print("Response body:")
            print(resp.read())
            sys.exit(1)
        else:
            print("GitHub status '{state}' has been set on {repo}#{sha} ".format(
                state=git_status,
                repo=os.getenv("REPO_FULL_NAME"),
                sha=os.getenv("SHA")))
